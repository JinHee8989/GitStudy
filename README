Git 공부 start

1. 버전관리란?  - 파일 변화를 시간에 따라 기록했다가 나중에 특정시점의 버전을 다시 꺼내올 수있는시스템
        - 로컬 버전 관리(로컬 VCS)  :  개인이 데이터베이스를 사용해 파일의 변경 정보를 관리
	- 중앙집중식 버전관리(CVCS): 다수와 함께 작업하기위해 등장, 파일을 관리하는 서버가 하나있고 클라이언트가 중앙 서버에서 파일을 받아 사용, 마지막 스냅샷만 있음(중앙서버에 문제 발생시 치명적)
	- 분산 버전관리(DVCS) : Git, Mecurial, Bazaar, Darcs 같은 DVCS에서의 클라이언트는 단순히 파일의 마지막 스냅샷을 Checkout 하지 않는다. 그냥 저장소를 히스토리와 더불어 전부 복제한다. 서버에 문제가 생기면 이 복제물로 다시 작업을 시작할 수 있다.

2. Git 기초 - git은 데이터를 스냅샷의 스트림으로 취급함 - CVS, Subversion, Perforce, Bazaar 등의 시스템은 각 파일의 변화를 시간순으로 관리하면서 파일들의 집합을 관리하지만 Git은 이런 식으로 데이터를 저장하지도 취급하지도 않는다. 대신 Git은 데이터를 파일 시스템 스냅샷의 연속으로 취급하고 크기가 아주 작다. Git은 커밋하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 그 순간을 중요하게 여긴다. 파일이 달라지지 않았으면 Git은 성능을 위해서 파일을 새로 저장하지 않는다. 단지 이전 상태의 파일에 대한 링크만 저장한다. Git은 데이터를 스냅샷의 스트림처럼 취급한다. - git은 거의 모든 명령이 로컬 파일과 데이터만 사용하기 때문에 네트워크에 있는 다른 컴퓨터는 필요 없다. -  Git은 파일을 Committed, Modified, Staged 이렇게 세 가지 상태로 관리한다.
        * Committed란 데이터가 로컬 데이터베이스에 안전하게 저장됐다는 것을 의미한다.
        * Modified는 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것을 말한다.
        * Staged란 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태를 의미한다. 
	- 이 세 가지 상태는 Git 프로젝트의 세 가지 단계와 연결돼 있다. Git 디렉토리, 워킹 트리, Staging Area 이렇게 세 가지 단계를 이해하고 넘어가자.
 	git 디렉토리 : git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳 (다른 컴퓨터에 있는 저장소를 Clone 할 때 Git 디렉토리가 만들어짐) 	워킹트리 : 워킹 트리는 프로젝트의 특정 버전을 Checkout 한 것, Git 디렉토리는 지금 작업하는 디스크에 있고 그 디렉토리 안에 압축된 데이터베이스에서 파일을 가져와서 워킹 트리를 만든다.
	Staging Area :  Git 디렉토리 안에 있다. 단순한 파일이고 곧 커밋할 파일에 대한 정보를 저장

- Git으로 하는 일은 기본적으로 아래와 같다.
	1)워킹 트리에서 파일을 수정한다.
	2)Staging Area에 파일을 Stage 해서 커밋할 스냅샷을 만든다. 모든 파일을 추가할 수도 있고 선택하여 추가할 수도 있다.
	3)Staging Area에 있는 파일들을 커밋해서 Git 디렉토리에 영구적인 스냅샷으로 저장한다. 
-  Git 디렉토리에 있는 파일들은 Committed 상태이다. 파일을 수정하고 Staging Area에 추가했다면 Staged이다. 그리고 Checkout 하고 나서 수정했지만, 아직 Staging Area에 추가하지 않았으면 Modified이다.
 Git 공부 start

 1. 버전관리란?  - 파일 변화를 시간에 따라 기록했다가 나중에 특정시점의 버전을 다시 꺼내올 수있는시스템
         - 로컬 버전 관리(로컬 VCS)  :  개인이 데이터베이스를 사용해 파일의 변경 정보를 관리
 	- 중앙집중식 버전관리(CVCS): 다수와 함께 작업하기위해 등장, 파일을 관리하는 서버가 하나있고 클라이언트가 중앙 서버에서 파일을 받아 사용, 마지막 스냅샷만 있음(중앙서버에 문제 발생시 치명적)
 	- 분산 버전관리(DVCS) : Git, Mecurial, Bazaar, Darcs 같은 DVCS에서의 클라이언트는 단순히 파일의 마지막 스냅샷을 Checkout 하지 않는다. 그냥 저장소를 히스토리와 더불어 전부 복제한다. 서버에 문제가 생기면 이 복제물로 다시 작업을 시작할 수 있다.

 2. Git 기초 - git은 데이터를 스냅샷의 스트림으로 취급함 - CVS, Subversion, Perforce, Bazaar 등의 시스템은 각 파일의 변화를 시간순으로 관리하면서 파일들의 집합을 관리하지만 Git은 이런 식으로 데이터를 저장하지도 취급하지도 않는다. 대신 Git은 데이터를 파일 시스템 스냅샷의 연속으로 취급하고 크기가 아주 작다. Git은 커밋하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 그 순간을 중요하게 여긴다. 파일이 달라지지 않았으면 Git은 성능을 위해서 파일을 새로 저장하지 않는다. 단지 이전 상태의 파일에 대한 링크만 저장한다. Git은 데이터를 스냅샷의 스트림처럼 취급한다. - git은 거의 모든 명령이 로컬 파일과 데이터만 사용하기 때문에 네트워크에 있는 다른 컴퓨터는 필요 없다. -  Git은 파일을 Committed, Modified, Staged 이렇게 세 가지 상태로 관리한다.
         * Committed란 데이터가 로컬 데이터베이스에 안전하게 저장됐다는 것을 의미한다.
         * Modified는 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것을 말한다.
         * Staged란 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태를 의미한다. 
 	- 이 세 가지 상태는 Git 프로젝트의 세 가지 단계와 연결돼 있다. Git 디렉토리, 워킹 트리, Staging Area 이렇게 세 가지 단계를 이해하고 넘어가자.
  	git 디렉토리 : git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳 (다른 컴퓨터에 있는 저장소를 Clone 할 때 Git 디렉토리가 만들어짐) 	워킹트리 : 워킹 트리는 프로젝트의 특정 버전을 Checkout 한 것, Git 디렉토리는 지금 작업하는 디스크에 있고 그 디렉토리 안에 압축된 데이터베이스에서 파일을 가져와서 워킹 트리를 만든다.
 	Staging Area :  Git 디렉토리 안에 있다. 단순한 파일이고 곧 커밋할 파일에 대한 정보를 저장

 - Git으로 하는 일은 기본적으로 아래와 같다.
 	1)워킹 트리에서 파일을 수정한다.
 	2)Staging Area에 파일을 Stage 해서 커밋할 스냅샷을 만든다. 모든 파일을 추가할 수도 있고 선택하여 추가할 수도 있다.
 	3)Staging Area에 있는 파일들을 커밋해서 Git 디렉토리에 영구적인 스냅샷으로 저장한다. 
 -  Git 디렉토리에 있는 파일들은 Committed 상태이다. 파일을 수정하고 Staging Area에 추가했다면 Staged이다. 그리고 Checkout 하고 나서 수정했지만, 아직 Staging Area에 추가하지 않았으면 Modified이다.
 
3.  Git 저장소 만들기 

1)기존 디렉토리를 git 저장소로 만들기 
Linux:
$ cd /home/user/my_project
Mac:
$ cd /Users/user/my_project
Windows:
$ cd /c/user/my_project
 : 해당 디렉토리로 이동 
$git init : .’git’이라는 하위디렉토리를 만듬. 여기엔 저장소에 필요한 뼈대파일이 들어있다. 아직 프로젝트의 파일을 관리하지 않음. 관리하게 하려면 하단의 명령어 필요
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
 



